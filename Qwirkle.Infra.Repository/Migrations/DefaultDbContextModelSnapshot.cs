// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Qwirkle.Infra.Repository;

#nullable disable

namespace Qwirkle.Infra.Repository.Migrations
{
    [DbContext(typeof(DefaultDbContext))]
    partial class DefaultDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "59f67386-577a-438c-8d7d-1d76a0ae7548",
                            Name = "Bot",
                            NormalizedName = "BOT"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "c27b58f3-539f-4f87-9682-50ec2c3e90f7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "c9551ff8-a8ff-44ac-98c3-12c9eabf5851",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "ebc057eb-547c-4931-9f0f-233d4a81fa02",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Qwirkle.Infra.Repository.Dao.GameDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("GameOver")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastPlayDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("Qwirkle.Infra.Repository.Dao.PlayerDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<byte>("GamePosition")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("GameTurn")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("LastTurnPoints")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("LastTurnSkipped")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("Qwirkle.Infra.Repository.Dao.TileDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Shape")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tile");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = 1,
                            Shape = 1
                        },
                        new
                        {
                            Id = 2,
                            Color = 1,
                            Shape = 2
                        },
                        new
                        {
                            Id = 3,
                            Color = 1,
                            Shape = 3
                        },
                        new
                        {
                            Id = 4,
                            Color = 1,
                            Shape = 4
                        },
                        new
                        {
                            Id = 5,
                            Color = 1,
                            Shape = 5
                        },
                        new
                        {
                            Id = 6,
                            Color = 1,
                            Shape = 6
                        },
                        new
                        {
                            Id = 7,
                            Color = 2,
                            Shape = 1
                        },
                        new
                        {
                            Id = 8,
                            Color = 2,
                            Shape = 2
                        },
                        new
                        {
                            Id = 9,
                            Color = 2,
                            Shape = 3
                        },
                        new
                        {
                            Id = 10,
                            Color = 2,
                            Shape = 4
                        },
                        new
                        {
                            Id = 11,
                            Color = 2,
                            Shape = 5
                        },
                        new
                        {
                            Id = 12,
                            Color = 2,
                            Shape = 6
                        },
                        new
                        {
                            Id = 13,
                            Color = 3,
                            Shape = 1
                        },
                        new
                        {
                            Id = 14,
                            Color = 3,
                            Shape = 2
                        },
                        new
                        {
                            Id = 15,
                            Color = 3,
                            Shape = 3
                        },
                        new
                        {
                            Id = 16,
                            Color = 3,
                            Shape = 4
                        },
                        new
                        {
                            Id = 17,
                            Color = 3,
                            Shape = 5
                        },
                        new
                        {
                            Id = 18,
                            Color = 3,
                            Shape = 6
                        },
                        new
                        {
                            Id = 19,
                            Color = 4,
                            Shape = 1
                        },
                        new
                        {
                            Id = 20,
                            Color = 4,
                            Shape = 2
                        },
                        new
                        {
                            Id = 21,
                            Color = 4,
                            Shape = 3
                        },
                        new
                        {
                            Id = 22,
                            Color = 4,
                            Shape = 4
                        },
                        new
                        {
                            Id = 23,
                            Color = 4,
                            Shape = 5
                        },
                        new
                        {
                            Id = 24,
                            Color = 4,
                            Shape = 6
                        },
                        new
                        {
                            Id = 25,
                            Color = 5,
                            Shape = 1
                        },
                        new
                        {
                            Id = 26,
                            Color = 5,
                            Shape = 2
                        },
                        new
                        {
                            Id = 27,
                            Color = 5,
                            Shape = 3
                        },
                        new
                        {
                            Id = 28,
                            Color = 5,
                            Shape = 4
                        },
                        new
                        {
                            Id = 29,
                            Color = 5,
                            Shape = 5
                        },
                        new
                        {
                            Id = 30,
                            Color = 5,
                            Shape = 6
                        },
                        new
                        {
                            Id = 31,
                            Color = 6,
                            Shape = 1
                        },
                        new
                        {
                            Id = 32,
                            Color = 6,
                            Shape = 2
                        },
                        new
                        {
                            Id = 33,
                            Color = 6,
                            Shape = 3
                        },
                        new
                        {
                            Id = 34,
                            Color = 6,
                            Shape = 4
                        },
                        new
                        {
                            Id = 35,
                            Color = 6,
                            Shape = 5
                        },
                        new
                        {
                            Id = 36,
                            Color = 6,
                            Shape = 6
                        },
                        new
                        {
                            Id = 37,
                            Color = 1,
                            Shape = 1
                        },
                        new
                        {
                            Id = 38,
                            Color = 1,
                            Shape = 2
                        },
                        new
                        {
                            Id = 39,
                            Color = 1,
                            Shape = 3
                        },
                        new
                        {
                            Id = 40,
                            Color = 1,
                            Shape = 4
                        },
                        new
                        {
                            Id = 41,
                            Color = 1,
                            Shape = 5
                        },
                        new
                        {
                            Id = 42,
                            Color = 1,
                            Shape = 6
                        },
                        new
                        {
                            Id = 43,
                            Color = 2,
                            Shape = 1
                        },
                        new
                        {
                            Id = 44,
                            Color = 2,
                            Shape = 2
                        },
                        new
                        {
                            Id = 45,
                            Color = 2,
                            Shape = 3
                        },
                        new
                        {
                            Id = 46,
                            Color = 2,
                            Shape = 4
                        },
                        new
                        {
                            Id = 47,
                            Color = 2,
                            Shape = 5
                        },
                        new
                        {
                            Id = 48,
                            Color = 2,
                            Shape = 6
                        },
                        new
                        {
                            Id = 49,
                            Color = 3,
                            Shape = 1
                        },
                        new
                        {
                            Id = 50,
                            Color = 3,
                            Shape = 2
                        },
                        new
                        {
                            Id = 51,
                            Color = 3,
                            Shape = 3
                        },
                        new
                        {
                            Id = 52,
                            Color = 3,
                            Shape = 4
                        },
                        new
                        {
                            Id = 53,
                            Color = 3,
                            Shape = 5
                        },
                        new
                        {
                            Id = 54,
                            Color = 3,
                            Shape = 6
                        },
                        new
                        {
                            Id = 55,
                            Color = 4,
                            Shape = 1
                        },
                        new
                        {
                            Id = 56,
                            Color = 4,
                            Shape = 2
                        },
                        new
                        {
                            Id = 57,
                            Color = 4,
                            Shape = 3
                        },
                        new
                        {
                            Id = 58,
                            Color = 4,
                            Shape = 4
                        },
                        new
                        {
                            Id = 59,
                            Color = 4,
                            Shape = 5
                        },
                        new
                        {
                            Id = 60,
                            Color = 4,
                            Shape = 6
                        },
                        new
                        {
                            Id = 61,
                            Color = 5,
                            Shape = 1
                        },
                        new
                        {
                            Id = 62,
                            Color = 5,
                            Shape = 2
                        },
                        new
                        {
                            Id = 63,
                            Color = 5,
                            Shape = 3
                        },
                        new
                        {
                            Id = 64,
                            Color = 5,
                            Shape = 4
                        },
                        new
                        {
                            Id = 65,
                            Color = 5,
                            Shape = 5
                        },
                        new
                        {
                            Id = 66,
                            Color = 5,
                            Shape = 6
                        },
                        new
                        {
                            Id = 67,
                            Color = 6,
                            Shape = 1
                        },
                        new
                        {
                            Id = 68,
                            Color = 6,
                            Shape = 2
                        },
                        new
                        {
                            Id = 69,
                            Color = 6,
                            Shape = 3
                        },
                        new
                        {
                            Id = 70,
                            Color = 6,
                            Shape = 4
                        },
                        new
                        {
                            Id = 71,
                            Color = 6,
                            Shape = 5
                        },
                        new
                        {
                            Id = 72,
                            Color = 6,
                            Shape = 6
                        },
                        new
                        {
                            Id = 73,
                            Color = 1,
                            Shape = 1
                        },
                        new
                        {
                            Id = 74,
                            Color = 1,
                            Shape = 2
                        },
                        new
                        {
                            Id = 75,
                            Color = 1,
                            Shape = 3
                        },
                        new
                        {
                            Id = 76,
                            Color = 1,
                            Shape = 4
                        },
                        new
                        {
                            Id = 77,
                            Color = 1,
                            Shape = 5
                        },
                        new
                        {
                            Id = 78,
                            Color = 1,
                            Shape = 6
                        },
                        new
                        {
                            Id = 79,
                            Color = 2,
                            Shape = 1
                        },
                        new
                        {
                            Id = 80,
                            Color = 2,
                            Shape = 2
                        },
                        new
                        {
                            Id = 81,
                            Color = 2,
                            Shape = 3
                        },
                        new
                        {
                            Id = 82,
                            Color = 2,
                            Shape = 4
                        },
                        new
                        {
                            Id = 83,
                            Color = 2,
                            Shape = 5
                        },
                        new
                        {
                            Id = 84,
                            Color = 2,
                            Shape = 6
                        },
                        new
                        {
                            Id = 85,
                            Color = 3,
                            Shape = 1
                        },
                        new
                        {
                            Id = 86,
                            Color = 3,
                            Shape = 2
                        },
                        new
                        {
                            Id = 87,
                            Color = 3,
                            Shape = 3
                        },
                        new
                        {
                            Id = 88,
                            Color = 3,
                            Shape = 4
                        },
                        new
                        {
                            Id = 89,
                            Color = 3,
                            Shape = 5
                        },
                        new
                        {
                            Id = 90,
                            Color = 3,
                            Shape = 6
                        },
                        new
                        {
                            Id = 91,
                            Color = 4,
                            Shape = 1
                        },
                        new
                        {
                            Id = 92,
                            Color = 4,
                            Shape = 2
                        },
                        new
                        {
                            Id = 93,
                            Color = 4,
                            Shape = 3
                        },
                        new
                        {
                            Id = 94,
                            Color = 4,
                            Shape = 4
                        },
                        new
                        {
                            Id = 95,
                            Color = 4,
                            Shape = 5
                        },
                        new
                        {
                            Id = 96,
                            Color = 4,
                            Shape = 6
                        },
                        new
                        {
                            Id = 97,
                            Color = 5,
                            Shape = 1
                        },
                        new
                        {
                            Id = 98,
                            Color = 5,
                            Shape = 2
                        },
                        new
                        {
                            Id = 99,
                            Color = 5,
                            Shape = 3
                        },
                        new
                        {
                            Id = 100,
                            Color = 5,
                            Shape = 4
                        },
                        new
                        {
                            Id = 101,
                            Color = 5,
                            Shape = 5
                        },
                        new
                        {
                            Id = 102,
                            Color = 5,
                            Shape = 6
                        },
                        new
                        {
                            Id = 103,
                            Color = 6,
                            Shape = 1
                        },
                        new
                        {
                            Id = 104,
                            Color = 6,
                            Shape = 2
                        },
                        new
                        {
                            Id = 105,
                            Color = 6,
                            Shape = 3
                        },
                        new
                        {
                            Id = 106,
                            Color = 6,
                            Shape = 4
                        },
                        new
                        {
                            Id = 107,
                            Color = 6,
                            Shape = 5
                        },
                        new
                        {
                            Id = 108,
                            Color = 6,
                            Shape = 6
                        });
                });

            modelBuilder.Entity("Qwirkle.Infra.Repository.Dao.TileOnBagDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("TileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("TileId");

                    b.ToTable("TileOnBag");
                });

            modelBuilder.Entity("Qwirkle.Infra.Repository.Dao.TileOnBoardDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<sbyte>("PositionX")
                        .HasColumnType("tinyint");

                    b.Property<sbyte>("PositionY")
                        .HasColumnType("tinyint");

                    b.Property<int>("TileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("TileId");

                    b.ToTable("TileOnBoard");
                });

            modelBuilder.Entity("Qwirkle.Infra.Repository.Dao.TileOnPlayerDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<byte>("RackPosition")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("TileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TileId");

                    b.ToTable("TileOnPlayer");
                });

            modelBuilder.Entity("Qwirkle.Infra.Repository.Dao.UserDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("GamesWon")
                        .HasColumnType("int");

                    b.Property<int>("Help")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Pseudo");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0866d5c-1f95-4eac-a4e8-f1fa6793e7ce",
                            Email = "bot1@bot",
                            EmailConfirmed = false,
                            GamesPlayed = 0,
                            GamesWon = 0,
                            Help = 0,
                            LockoutEnabled = false,
                            NormalizedUserName = "BOT1",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            TwoFactorEnabled = false,
                            UserName = "bot1"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e2e9404-c86a-4e87-91a2-3f1917a3201a",
                            Email = "bot2@bot",
                            EmailConfirmed = false,
                            GamesPlayed = 0,
                            GamesWon = 0,
                            Help = 0,
                            LockoutEnabled = false,
                            NormalizedUserName = "BOT2",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            TwoFactorEnabled = false,
                            UserName = "bot2"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "507d8d82-13a6-49f4-83ec-7d86aa9ce2ac",
                            Email = "bot3@bot",
                            EmailConfirmed = false,
                            GamesPlayed = 0,
                            GamesWon = 0,
                            Help = 0,
                            LockoutEnabled = false,
                            NormalizedUserName = "BOT3",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            TwoFactorEnabled = false,
                            UserName = "bot3"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78937220-3f19-4079-9fb0-880d1a9ba5b9",
                            Email = "bot4@bot",
                            EmailConfirmed = false,
                            GamesPlayed = 0,
                            GamesWon = 0,
                            Help = 0,
                            LockoutEnabled = false,
                            NormalizedUserName = "BOT4",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            TwoFactorEnabled = false,
                            UserName = "bot4"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38aa0e64-62e0-424d-98c1-f693cb637e47",
                            Email = "thomas@newtomsoft.fr",
                            EmailConfirmed = false,
                            FirstName = "Thomas",
                            GamesPlayed = 0,
                            GamesWon = 0,
                            Help = 0,
                            LastName = "Vuille",
                            LockoutEnabled = false,
                            NormalizedEmail = "THOMAS@NEWTOMSOFT.FR",
                            NormalizedUserName = "TOM",
                            PasswordHash = "AQAAAAEAACcQAAAAED29kKSVgjTdA6s6pXQ0a+7iy9MJ5Y1byxFl2MWZnX4WE6lw1SsR9FGeGypraM3G+g==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "1DCA68127F3E4B9C9D79891DF106DDE0",
                            TwoFactorEnabled = false,
                            UserName = "Tom"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d401989c-4fcf-4c2a-8a88-bde513feb321",
                            Email = "jc@jc.fr",
                            EmailConfirmed = false,
                            FirstName = "Jean Charles",
                            GamesPlayed = 0,
                            GamesWon = 0,
                            Help = 0,
                            LastName = "Gouleau",
                            LockoutEnabled = false,
                            NormalizedEmail = "JC@JC.FR",
                            NormalizedUserName = "JC",
                            PasswordHash = "AQAAAAEAACcQAAAAEJOr0iSf9bL59UJqwWyCpcjdampHsvulqOZ/NTApuuwLJsc1Sf9xRquQWPIz2S8rUQ==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "D5FD8008831340B29E6AAA63540BC6E3",
                            TwoFactorEnabled = false,
                            UserName = "JC"
                        });
                });

            modelBuilder.Entity("UserDaoUserDao", b =>
                {
                    b.Property<int>("BookmarkedById")
                        .HasColumnType("int");

                    b.Property<int>("BookmarkedOpponentsId")
                        .HasColumnType("int");

                    b.HasKey("BookmarkedById", "BookmarkedOpponentsId");

                    b.HasIndex("BookmarkedOpponentsId");

                    b.ToTable("UserDaoUserDao");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Qwirkle.Infra.Repository.Dao.UserDao", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Qwirkle.Infra.Repository.Dao.UserDao", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Qwirkle.Infra.Repository.Dao.UserDao", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Qwirkle.Infra.Repository.Dao.UserDao", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Qwirkle.Infra.Repository.Dao.PlayerDao", b =>
                {
                    b.HasOne("Qwirkle.Infra.Repository.Dao.GameDao", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Qwirkle.Infra.Repository.Dao.UserDao", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Qwirkle.Infra.Repository.Dao.TileOnBagDao", b =>
                {
                    b.HasOne("Qwirkle.Infra.Repository.Dao.GameDao", "Game")
                        .WithMany("TilesOnBag")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Qwirkle.Infra.Repository.Dao.TileDao", "Tile")
                        .WithMany()
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("Qwirkle.Infra.Repository.Dao.TileOnBoardDao", b =>
                {
                    b.HasOne("Qwirkle.Infra.Repository.Dao.GameDao", "Game")
                        .WithMany("TilesOnBoard")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Qwirkle.Infra.Repository.Dao.TileDao", "Tile")
                        .WithMany()
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("Qwirkle.Infra.Repository.Dao.TileOnPlayerDao", b =>
                {
                    b.HasOne("Qwirkle.Infra.Repository.Dao.PlayerDao", "Player")
                        .WithMany("Tiles")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Qwirkle.Infra.Repository.Dao.TileDao", "Tile")
                        .WithMany()
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("UserDaoUserDao", b =>
                {
                    b.HasOne("Qwirkle.Infra.Repository.Dao.UserDao", null)
                        .WithMany()
                        .HasForeignKey("BookmarkedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Qwirkle.Infra.Repository.Dao.UserDao", null)
                        .WithMany()
                        .HasForeignKey("BookmarkedOpponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Qwirkle.Infra.Repository.Dao.GameDao", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("TilesOnBag");

                    b.Navigation("TilesOnBoard");
                });

            modelBuilder.Entity("Qwirkle.Infra.Repository.Dao.PlayerDao", b =>
                {
                    b.Navigation("Tiles");
                });
#pragma warning restore 612, 618
        }
    }
}
